# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - http://felixduvallet.github.io/ros-travis-integration
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and get installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#
# There are two variables you may want to change:
#   - ROS_DISTRO (default is indigo). Note that packages must be available for
#     ubuntu 14.04 trusty.
#   - ROSINSTALL_FILE (default is dependencies.rosinstall inside the repo
#     root). This should list all necessary repositories in wstool format (see
#     the ros wiki). If the file does not exists then nothing happens.
#
# See the README.md for more information.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language:
  - generic
cache:
  - apt

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO=indigo
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
    - PYTHONPATH=$PYTHONPATH:/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -

# Create a catkin workspace with the package under integration.
install:
  # Set up costasr_stack
  - $CI_SOURCE_PATH/setup/setup_tom.sh
  - export COSTAR_WS="$HOME/costar_ws"
  - touch $COSTAR_WS/src/ur_modern_driver/CATKIN_IGNORE
  - touch $COSTAR_PLAN_DIR/costar_gazebo_plugins/CATKIN_IGNORE
  - touch $COSTAR_WS/src/robotiq/robotiq_s_model_articulated_gazebo_plugins/CATKIN_IGNORE
  - touch $COSTAR_WS/src/costar_stack/costar_perception/sp_segmenter/CATKIN_IGNORE
  - touch $COSTAR_WS/src/costar_stack/costar_predicator/predicator_8020_module/CATKIN_IGNORE
  - touch $COSTAR_WS/src/ur_modern_driver/CATKIN_IGNORE
  - touch $CI_SOURCE_PATH/costar_gazebo_plugins/CATKIN_IGNORE
  - touch $COSTAR_WS/src/robotiq/robotiq_s_model_articulated_gazebo_plugins/CATKIN_IGNORE
  - touch $COSTAR_WS/src/costar_stack/costar_perception/sp_segmenter/CATKIN_IGNORE
  - touch $COSTAR_WS/src/costar_stack/costar_predicator/predicator_8020_module/CATKIN_IGNORE

  - cd ~/costar_ws/src
  # Add the package under integration to the workspace using a symlink.
  - ln -s $CI_SOURCE_PATH .
  - rosdep install -y --from-paths ./ --ignore-src --rosdistro $ROS_DISTRO
  - catkin build

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  - cd ~/costar_ws/src

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd ~/costar_ws
  - catkin build
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  #TODO: fix tests; something wrong with TF+numpy
  #- $CI_SOURCE_PATH/costar_task_plan/tests/task_test.py
  #- $CI_SOURCE_PATH/costar_task_plan/tests/cem_test.py
