'''
Generate plots for distance vs error and attempts vs error or any other metric present in the csv generated by costar_hypertree_inference.py
See main for object initialization to generate plots from the evaluated data.
'''
import h5py
import os
import csv
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np

def inference_mode_gen(file_names):
    """ Generate information for all time steps in a single example to be utilized for evaluating and plotting.
    """
    file_list_updated = []
    file_len_list = []
    gripper_action_goal_idx = []
    # print(len(file_names))
    file_mode = "w"
    file_len = 0
    for f_name in file_names:
        with h5py.File(f_name, 'r') as data:
            file_len = len(data['gripper_action_goal_idx']) - 1
            file_len_list.append(file_len)
            gripper_action_goal_idx.append(list(data['gripper_action_goal_idx']))

    for i in range(len(file_names)):
        for j in range(file_len_list[i]):
            file_list_updated.append(file_names[i])
    return file_list_updated, file_len_list, gripper_action_goal_idx

class CostarInferencePlotGenerator():

    def __init__(self, filenames_text):
        '''
        Initializes plot_generator for the given file names in the text file.

        #Arguments
        filenames_text: List of file paths to be read

        '''
        print('loading data from: ' + str(filenames_text))
        self.filenames = np.genfromtxt(filenames_text, dtype='str', delimiter=', ')
        print(self.filenames)
        self.gripper_action_goal_idx = []
        self.file_list_updated, self.file_len_list, self.gripper_action_goal_idx = inference_mode_gen(self.filenames)
        print('')
        # self.generator = self.initialize_generator(pose_name)

    def inference_mode_gen(self, file_names):
        """ Generate information for all time steps in a single example to be utilized for evaluating and plotting.
        """
        self.file_list_updated = []
        self.file_len_list = []
        # print(len(file_names))
        file_mode = "w"
        file_len = 0
        print('len ', len(file_names))
        for f_name in file_names:
            with h5py.File(f_name, 'r') as data:
                file_len = len(data['gripper_action_goal_idx']) - 1
                self.file_len_list.append(file_len)
                self.gripper_action_goal_idx.append(list(data['gripper_action_goal_idx']))

        for i in range(len(file_names)):
            for j in range(self.file_len_list[i]):
                self.file_list_updated.append(file_names[i])

    def generate_plots(self, score_file, metric_2):
        '''
        Generates plots for the given metric
        #Arguments
        score_file: name of the file containing the metrics
        metric_2: name of metric to be used in plot generation
        '''
        with open(score_file, 'r') as fp:
            reader = csv.reader(fp)
            headers = next(reader, None)
            scores = list(reader)
        # metric_1_index = headers.index(metric_1)
        metric_2_index = headers.index(metric_2)
        frames = []
        loss = []
        for row in scores:
            frames.append(row[1])
            loss.append(row[metric_2_index])

        # initialization of metrics and step size for plots
        frames = list(map(int, frames))
        loss = list(map(float, loss))
        figure1 = plt.figure(1, figsize=(20, 10))
        plt.xticks(np.arange(min(frames), max(frames)+1, 10))
        plt.yticks(np.arange(min(loss), max(loss)+1, 0.1))
        indexes = np.where(np.array(frames) == 1)[0]
        # print(indexes)
        ax = plt.axes()
        n_lines = len(indexes)
        ax.set_color_cycle([plt.cm.cool(i) for i in np.linspace(0, 1, n_lines)])
        count = 0
        for i in indexes[1:]:
            goals = self.gripper_action_goal_idx[count]
            count += 1
            # plotting distance to goal for each attempt
            plt.scatter(np.array(goals[1:] - np.array(frames[indexes[count-1]:i])), loss[indexes[count-1]:i])
        goals = self.gripper_action_goal_idx[-1]
        print("len of goals ",len(goals))
        plt.scatter(np.array(goals[1:]) - frames[indexes[-1]:], loss[indexes[-1]:])
        # print(frames[indexes[-1]:-8]-np.array(goals[1:]))
        # plt.plot(frames[:225], loss[:225])
        # plt.plot(frames[225:], loss[225:])
        plt.xlabel('Distance to goal')
        plt.ylabel(metric_2)
        plt.savefig("plot1.png")
        # plt.show()

        # generating the second plot
        figure2 = plt.figure(2, figsize=(20, 10))
        frame_range = range(1, len(frames)+1)
        print(len(frame_range))
        plt.xticks(np.arange(min(loss), max(loss)+1, 0.1))
        figure2.axes[0].yaxis.set_major_formatter(ticker.PercentFormatter(xmax=len(frames)))
        plt.plot(np.sort(loss), frame_range)
        # print(figure2.axes)
        plt.xlabel(metric_2)
        plt.ylabel('Attempts')
        plt.savefig('plot2.png')
        # plt.show()


if __name__ == "__main__":
    filenames = r"C:\Users\Varun\JHU\LAB\Projects\costar_task_planning_stacking_dataset_v0.1\train.txt"
    inference_generator = CostarInferencePlotGenerator(filenames)
    inference_generator.generate_plots('inference_results_per_frame.csv', 'angle_error')
